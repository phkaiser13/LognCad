# .github/workflows/build.yml

# Nome do workflow, que aparecerá na aba "Actions" do seu repositório GitHub
name: Build do Projeto LognCad

# Define os gatilhos (eventos) que iniciarão este workflow
on:
  # Roda quando um push é feito para a branch 'master'
  push:
    branches: [ master ]
  # Roda quando um pull request é aberto (ou atualizado) para a branch 'master'
  pull_request:
    branches: [ master ]

# Define os "trabalhos" (jobs) que o workflow executará.
# Podemos ter vários jobs, mas para compilar, um é suficiente.
jobs:
  # Nome do nosso job. Pode ser qualquer nome.
  build:
    # Define o ambiente onde o job rodará. 'ubuntu-latest' é uma máquina virtual Linux.
    runs-on: ubuntu-latest

    # Define a sequência de passos (steps) que o job executará
    steps:
      # Passo 1: Clona o seu repositório para a máquina virtual
      # A ação 'actions/checkout' é padrão e essencial para acessar seu código.
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Java (JDK)
      # A ação 'actions/setup-java' instala a versão do Java que você precisa.
      - name: Configurar o JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # 'Temurin' é uma distribuição popular e confiável do OpenJDK

      # Passo 3: Concede permissão de execução para o Gradle Wrapper
      # Em ambientes Linux, é necessário garantir que o script 'gradlew' pode ser executado.
      - name: Conceder permissão de execução ao gradlew
        run: chmod +x ./gradlew

      # Passo 4: Executa o comando de build com o Gradle
      # Este é o coração do workflow. Ele invoca o Gradle para compilar o código,
      # baixar as dependências e rodar os testes.
      - name: Compilar com o Gradle
        run: ./gradlew build --no-daemon
